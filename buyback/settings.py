"""
Django settings for buyback project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import dj_database_url
from dotenv import load_dotenv
import environ


# Initialize environment variables
env = environ.Env()
environ.Env.read_env()  # This reads the .env file

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['cashthatgadget-6181349c7e0a.herokuapp.com', 'localhost']



# Application definition

INSTALLED_APPS = [
    'jazzmin',  
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_bootstrap4',
    'home',
    'products',
    'ckeditor',
    'ckeditor_uploader',  # Required for image upload functionality
    'contact',
    'revieworder',
    'checkout',
    'profiles',
    'debug_toolbar',
    'settings',
    'email_templates',
    'environ',
    'cloudinary',
    'cloudinary_storage',
    
    
]


# Specify the template pack
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# CKEditor settings for image uploads
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_CONFIGS = {
    'default': {
        'allowedContent': True,  # Allow all HTML content
        'extraAllowedContent': 'i[class*="fa-"], ul[class], li[class], div[class*="fa-"]',  # Allow FontAwesome icons
        'removePlugins': 'stylesheetparser',  # Disable the stylesheetparser plugin
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList'],
            ['Link', 'Unlink'],
            ['Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Image', 'Table'],
            ['RemoveFormat', 'Source'],
        ],
        'extraPlugins': ','.join(['font', 'colorbutton']),
        'filebrowserUploadUrl': '/ckeditor/upload/',  # Set upload URL
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'ERROR',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'settings.middleware.SettingsMiddleware',  # Temporarily comment this out to test

    
]

if DEBUG:
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

INTERNAL_IPS = ['127.0.0.1',]

ROOT_URLCONF = 'buyback.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # required by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'revieworder.context_processors.cart_total_quantity',
            ],
        },
    },
]


JAZZMIN_SETTINGS = {

    "debug": True,
    "site_title": "My Admin",  # The title in the browser tab
    "site_header": "My Admin Dashboard",  # The header that appears at the top of the page
    "site_brand": "Welcome Admin",  # The brand name or logo in the top left corner
    "site_icon": "https://path-to-your-logo.png",  # Optional: URL to your site icon
    "welcome_sign": "Welcome to the Admin Dashboard",  # Optional: Custom welcome message
    
    # Custom Top Menu links
    "topmenu_links": [
        {"name": "Home", "url": "/", "permissions": ["auth.view_user"]},
        
    ],
    
    # Custom User Avatar (Optional)
    "user_avatar": "",  # Optional: URL to your avatar image
    
    # Change Sidebar Settings
    "sidebar_background_color": "#1a1a1a",  # Background color of the sidebar (default is dark)
    "sidebar_text_color": "#fff",  # Text color of the sidebar (default is white)
    
    # Adjust the admin UI tweaks
    "theme": "dark",  # Options: 'light', 'blue', 'green', 'dark'
    "navbar": "default",  # Navbar position (you can try 'fixed', 'static')
    
    # Customize the appearance of the admin
    "show_ui_builder": True,  # Show the UI builder option in the admin panel for customization
    "use_navbar_search": True,  # Enable the navbar search functionality
    "hide_apps": ["auth", "admin"],  # Hide default apps from sidebar

    "custom_css": "css/admin/admin.css",  # Path to your custom CSS file

}



AUTHENTICATION_BACKENDS = (

    'django.contrib.auth.backends.ModelBackend',

    'allauth.account.auth_backends.AuthenticationBackend',
)


SITE_ID = 1


EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'

DEFAULT_FROM_EMAIL = "EMAIL_HOST_USER"
ADMIN_EMAIL = os.getenv('ADMIN_EMAIL')


ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 5
LOGIN_URL = '/accounts/login/'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

ACCOUNT_SIGNUP_REDIRECT_URL = '/profile/'
LOGIN_REDIRECT_URL = '/profile/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'


SHIPENGINE_API_KEY = os.getenv('SHIPENGINE_API_KEY')


APPEND_SLASH = True


WSGI_APPLICATION = 'buyback.wsgi.application'




# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    } if DEBUG else dj_database_url.parse(os.getenv('DATABASE_URL'))
}

  

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # This is your main static folder
]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")



STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'





# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_FORMS = {
    'signup': 'profiles.forms.CustomSignupForm',  # Update the path as per your app structure
}
